{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/numeral/numeral.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","define","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","prototype","call","accum","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","unformatRegex","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray"],"mappings":";mJAAA,+CACe,SAASA,EAA2BC,EAAGC,GACpD,IAAIC,EAEJ,GAAsB,qBAAXC,QAAgD,MAAtBH,EAAEG,OAAOC,UAAmB,CAC/D,GAAIC,MAAMC,QAAQN,KAAOE,EAAK,YAA2BF,KAAOC,GAAkBD,GAAyB,kBAAbA,EAAEO,OAAqB,CAC/GL,IAAIF,EAAIE,GACZ,IAAIM,EAAI,EAEJC,EAAI,aAER,MAAO,CACLC,EAAGD,EACHE,EAAG,WACD,OAAIH,GAAKR,EAAEO,OAAe,CACxBK,MAAM,GAED,CACLA,MAAM,EACNC,MAAOb,EAAEQ,OAGbM,EAAG,SAAWC,GACZ,MAAMA,GAERC,EAAGP,GAIP,MAAM,IAAIQ,UAAU,yIAGtB,IAEIC,EAFAC,GAAmB,EACnBC,GAAS,EAEb,MAAO,CACLV,EAAG,WACDR,EAAKF,EAAEG,OAAOC,aAEhBO,EAAG,WACD,IAAIU,EAAOnB,EAAGoB,OAEd,OADAH,EAAmBE,EAAKT,KACjBS,GAETP,EAAG,SAAWS,GACZH,GAAS,EACTF,EAAMK,GAERP,EAAG,WACD,IACOG,GAAoC,MAAhBjB,EAAW,QAAWA,EAAW,SAC1D,QACA,GAAIkB,EAAQ,MAAMF,O,qBCpD1B,aAUc,2BAANM,EAMA,WAKJ,IAAIC,EACAC,EACAC,EAAU,QACVC,EAAU,GACVC,EAAU,GACVC,EAAW,CACPC,cAAe,KACfC,WAAY,KACZC,WAAY,KACZC,cAAe,MACfC,mBAAmB,GAEvBC,EAAU,CACNL,cAAeD,EAASC,cACxBC,WAAYF,EAASE,WACrBC,WAAYH,EAASG,WACrBC,cAAeJ,EAASI,cACxBC,kBAAmBL,EAASK,mBASpC,SAASE,EAAQC,EAAOC,GACpBC,KAAKC,OAASH,EAEdE,KAAKE,OAASH,EAi8BtB,OA97BId,EAAU,SAASa,GACf,IAAIzB,EACA8B,EACAC,EACAC,EAEJ,GAAIpB,EAAQqB,UAAUR,GAClBzB,EAAQyB,EAAMzB,aACX,GAAc,IAAVyB,GAAgC,qBAAVA,EAC7BzB,EAAQ,OACL,GAAc,OAAVyB,GAAkBZ,EAAEqB,MAAMT,GACjCzB,EAAQ,UACL,GAAqB,kBAAVyB,EACd,GAAIF,EAAQJ,YAAcM,IAAUF,EAAQJ,WACxCnB,EAAQ,OACL,GAAIuB,EAAQH,YAAcK,IAAUF,EAAQH,aAAeK,EAAMU,QAAQ,WAAY,IAAIzC,OAC5FM,EAAQ,SACL,CACH,IAAK8B,KAAQf,EAGT,IAFAiB,EAAmD,oBAAnCjB,EAAQe,GAAMM,QAAQC,SAA0BtB,EAAQe,GAAMM,QAAQC,WAAatB,EAAQe,GAAMM,QAAQC,WAE3GZ,EAAMa,MAAMN,GAAS,CAC/BD,EAAmBhB,EAAQe,GAAMO,SAEjC,MAMRrC,GAFA+B,EAAmBA,GAAoBnB,EAAQC,EAAE0B,gBAExBd,QAG7BzB,EAAQwC,OAAOf,IAAS,KAG5B,OAAO,IAAID,EAAQC,EAAOzB,KAItByC,QAAU3B,EAGlBF,EAAQqB,UAAY,SAASS,GACzB,OAAOA,aAAelB,GAI1BZ,EAAQC,EAAIA,EAAI,CAEZ8B,eAAgB,SAAS3C,EAAO4C,EAAQC,GACpC,IAWIC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EApBAC,EAASrC,EAAQJ,EAAQW,QAAQL,eACjCoC,GAAO,EACPC,GAAS,EACTC,EAAe,EACfC,EAAO,GACPC,EAAW,KACXC,EAAU,IACVC,EAAU,IACVC,EAAW,IACXC,EAAU,GACVC,GAAM,EAgGV,GAnFA/D,EAAQA,GAAS,EAEjB+C,EAAMiB,KAAKjB,IAAI/C,GAIXY,EAAQC,EAAEoD,SAASrB,EAAQ,MAC3BU,GAAO,EACPV,EAASA,EAAOT,QAAQ,WAAY,MAC7BvB,EAAQC,EAAEoD,SAASrB,EAAQ,MAAQhC,EAAQC,EAAEoD,SAASrB,EAAQ,QACrEM,EAAStC,EAAQC,EAAEoD,SAASrB,EAAQ,KAAOA,EAAOsB,QAAQ,KAAOlE,EAAQ,EAAI4C,EAAOsB,QAAQ,MAAQ,EACpGtB,EAASA,EAAOT,QAAQ,WAAY,KAIpCvB,EAAQC,EAAEoD,SAASrB,EAAQ,OAG3BE,KAFAA,EAAYF,EAAON,MAAM,iBAEDQ,EAAU,GAG9BlC,EAAQC,EAAEoD,SAASrB,EAAQ,QAC3Ba,EAAO,KAGXb,EAASA,EAAOT,QAAQ,IAAIgC,OAAOV,EAAO,YAAa,IAEnDV,GAAOW,IAAaZ,GAA2B,MAAdA,GAEjCW,GAAQJ,EAAOe,cAAcV,SAC7B1D,GAAgB0D,GACTX,EAAMW,GAAYX,GAAOY,IAAYb,GAA2B,MAAdA,GAEzDW,GAAQJ,EAAOe,cAAcT,QAC7B3D,GAAgB2D,GACTZ,EAAMY,GAAWZ,GAAOa,IAAYd,GAA2B,MAAdA,GAExDW,GAAQJ,EAAOe,cAAcR,QAC7B5D,GAAgB4D,IACTb,EAAMa,GAAWb,GAAOc,IAAaf,GAA2B,MAAdA,KAEzDW,GAAQJ,EAAOe,cAAcP,SAC7B7D,GAAgB6D,IAKpBjD,EAAQC,EAAEoD,SAASrB,EAAQ,SAC3BW,GAAS,EACTX,EAASA,EAAOT,QAAQ,MAAO,MAInCa,EAAMhD,EAAMqE,WAAWC,MAAM,KAAK,GAClCrB,EAAYL,EAAO0B,MAAM,KAAK,GAC9BnB,EAAYP,EAAOsB,QAAQ,KAC3BV,GAAgBZ,EAAO0B,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGhC,MAAM,OAAS,IAAI5C,OAElEuD,GACIrC,EAAQC,EAAEoD,SAAShB,EAAW,MAE9BA,GADAA,EAAYA,EAAUd,QAAQ,IAAK,KACbmC,MAAM,KAC5BR,EAAUlD,EAAQC,EAAE0D,QAAQvE,EAAQiD,EAAU,GAAGvD,OAASuD,EAAU,GAAGvD,OAASmD,EAAkBI,EAAU,GAAGvD,SAE/GoE,EAAUlD,EAAQC,EAAE0D,QAAQvE,EAAOiD,EAAUvD,OAAQmD,GAGzDG,EAAMc,EAAQQ,MAAM,KAAK,GAGrBR,EADAlD,EAAQC,EAAEoD,SAASH,EAAS,KAClBT,EAAOmB,WAAWV,QAAUA,EAAQQ,MAAM,KAAK,GAE/C,GAGVf,GAAuC,IAA7Bf,OAAOsB,EAAQW,MAAM,MAC/BX,EAAU,KAGdd,EAAMpC,EAAQC,EAAE0D,QAAQvE,EAAO,EAAG6C,GAIlCY,IAASX,GAAaN,OAAOQ,IAAQ,KAAQS,IAASJ,EAAOe,cAAcV,SAG3E,OAFAV,EAAM0B,OAAOlC,OAAOQ,GAAO,KAEnBS,GACJ,KAAKJ,EAAOe,cAAcP,SACtBJ,EAAOJ,EAAOe,cAAcR,QAC5B,MACJ,KAAKP,EAAOe,cAAcR,QACtBH,EAAOJ,EAAOe,cAAcT,QAC5B,MACJ,KAAKN,EAAOe,cAAcT,QACtBF,EAAOJ,EAAOe,cAAcV,SAYxC,GALI9C,EAAQC,EAAEoD,SAASjB,EAAK,OACxBA,EAAMA,EAAIyB,MAAM,GAChBV,GAAM,GAGNf,EAAItD,OAAS8D,EACb,IAAK,IAAI7D,EAAI6D,EAAeR,EAAItD,OAAQC,EAAI,EAAGA,IAC3CqD,EAAM,IAAMA,EAwBpB,OApBIG,GAAa,IACbH,EAAMA,EAAIqB,WAAWlC,QAAQ,0BAA2B,KAAOkB,EAAOmB,WAAWrB,YAGzD,IAAxBP,EAAOsB,QAAQ,OACflB,EAAM,IAGVI,EAASJ,EAAMc,GAAWL,GAAc,IAEpCH,EACAF,GAAUE,GAAQS,EAAM,IAAM,IAAMX,GAAUE,GAAQS,EAAM,IAAM,IAE9Db,GAAU,EACVE,EAAoB,IAAXF,GAAgBa,EAAM,IAAM,KAAOX,EAASA,GAAUW,EAAM,IAAM,KACpEA,IACPX,EAAS,IAAMA,GAIhBA,GAGXb,eAAgB,SAASoC,GACrB,IAQIC,EACA5E,EAEAgC,EAXAqB,EAASrC,EAAQO,EAAQL,eACzB2D,EAAiBF,EACjBP,EAAgB,CACZP,SAAU,EACVD,QAAS,EACTD,QAAS,EACTD,SAAU,IAOlB,GAAInC,EAAQJ,YAAcwD,IAAWpD,EAAQJ,WACzCnB,EAAQ,OACL,GAAIuB,EAAQH,YAAcuD,IAAWpD,EAAQH,aAAeuD,EAAOxC,QAAQ,WAAY,IAAIzC,OAC9FM,EAAQ,SACL,CAOH,IAAK4E,KANL5E,EAAQ,EAE0B,MAA9BqD,EAAOmB,WAAWV,UAClBa,EAASA,EAAOxC,QAAQ,MAAO,IAAIA,QAAQkB,EAAOmB,WAAWV,QAAS,MAGrDM,EAGjB,GAFApC,EAAS,IAAImC,OAAO,YAAcd,EAAOe,cAAcQ,GAAgB,aAAevB,EAAOyB,SAASC,OAAS,iBAE3GF,EAAevC,MAAMN,GAAS,CAC9BhC,GAASgE,KAAKgB,IAAI,GAAIZ,EAAcQ,IACpC,MAKR5E,IAAU2E,EAAOL,MAAM,KAAK5E,OAASsE,KAAKiB,IAAIN,EAAOL,MAAM,KAAK5E,OAAS,EAAGiF,EAAOL,MAAM,KAAK5E,OAAS,IAAM,EAAI,GAAK,EAGtHiF,EAASA,EAAOxC,QAAQ,aAAc,IAEtCnC,GAASwC,OAAOmC,GAGpB,OAAO3E,GAEXkC,MAAO,SAAF,oGAAE,WAASlC,GACZ,MAAwB,kBAAVA,GAAsBkC,MAAMlC,MAE9CiE,SAAU,SAASU,EAAQO,GACvB,OAAmC,IAA5BP,EAAOT,QAAQgB,IAE1BC,OAAQ,SAASR,EAAQS,EAAWC,GAChC,OAAOV,EAAOF,MAAM,EAAGY,GAASD,EAAYT,EAAOF,MAAMY,IAE7DC,OAAQ,SAASC,EAAOC,GACpB,GAAa,OAAT7D,KACA,MAAM,IAAIvB,UAAU,sDAGxB,GAAwB,oBAAboF,EACP,MAAM,IAAIpF,UAAUoF,EAAW,sBAGnC,IAGIxF,EAHAyF,EAAIC,OAAOH,GACXI,EAAMF,EAAE/F,SAAW,EACnBkG,EAAI,EAGR,GAAyB,IAArBC,UAAUnG,OACVM,EAAQ6F,UAAU,OACf,CACH,KAAOD,EAAID,KAASC,KAAKH,IACrBG,IAGJ,GAAIA,GAAKD,EACL,MAAM,IAAIvF,UAAU,+CAGxBJ,EAAQyF,EAAEG,KAEd,KAAOA,EAAID,EAAKC,IACRA,KAAKH,IACLzF,EAAQwF,EAASxF,EAAOyF,EAAEG,GAAIA,EAAGH,IAGzC,OAAOzF,GAOX8F,WAAY,SAAUC,GAClB,IAAIC,EAAQD,EAAE1B,WAAWC,MAAM,KAE/B,OAAO0B,EAAMtG,OAAS,EAAI,EAAIsE,KAAKgB,IAAI,GAAIgB,EAAM,GAAGtG,SAOxDuG,iBAAkB,WAGd,OAFWzG,MAAM0G,UAAUzB,MAAM0B,KAAKN,WAE1BP,QAAO,SAASc,EAAO3F,GAC/B,IAAI4F,EAAKxF,EAAEiF,WAAWrF,GACtB,OAAO2F,EAAQC,EAAKD,EAAQC,IAC7B,IAQP9B,QAAS,SAASvE,EAAOsG,EAAazD,EAAkB0D,GACpD,IAEIC,EACAC,EACAC,EACAtD,EALAuD,EAAa3G,EAAMqE,WAAWC,MAAM,KACpCsC,EAAcN,GAAeC,GAAa,GAuB9C,OAfEC,EADwB,IAAtBG,EAAWjH,OACMsE,KAAKiB,IAAIjB,KAAK6C,IAAIF,EAAW,GAAGjH,OAAQkH,GAAcN,GAEtDM,EAGrBF,EAAQ1C,KAAKgB,IAAI,GAAIwB,GAGrBpD,GAAUP,EAAiB7C,EAAQ,KAAOwG,GAAoBE,GAAOnC,QAAQiC,GAEzED,EAAYD,EAAcE,IAC1BC,EAAkB,IAAItC,OAAO,YAAcoC,GAAaD,EAAcE,IAAqB,MAC3FpD,EAASA,EAAOjB,QAAQsE,EAAiB,KAGtCrD,IAKfxC,EAAQW,QAAUA,EAGlBX,EAAQG,QAAUA,EAGlBH,EAAQI,QAAUA,EAKlBJ,EAAQyC,OAAS,SAASyD,GAKtB,OAJIA,IACAvF,EAAQL,cAAgB4F,EAAIC,eAGzBxF,EAAQL,eAMnBN,EAAQoG,WAAa,SAASF,GAC1B,IAAKA,EACD,OAAO9F,EAAQO,EAAQL,eAK3B,GAFA4F,EAAMA,EAAIC,eAEL/F,EAAQ8F,GACT,MAAM,IAAIG,MAAM,oBAAsBH,GAG1C,OAAO9F,EAAQ8F,IAGnBlG,EAAQsG,MAAQ,WACZ,IAAK,IAAIC,KAAYlG,EACjBM,EAAQ4F,GAAYlG,EAASkG,IAIrCvG,EAAQO,WAAa,SAASyB,GAC1BrB,EAAQJ,WAAgC,kBAAZyB,EAAuBA,EAAS,MAGhEhC,EAAQQ,WAAa,SAAUwB,GAC3BrB,EAAQH,WAAgC,kBAAZwB,EAAuBA,EAAS,MAGhEhC,EAAQS,cAAgB,SAASuB,GAC7BrB,EAAQF,cAAmC,kBAAZuB,EAAuBA,EAAS,OAGnEhC,EAAQwG,SAAW,SAASC,EAAMC,EAAM1E,GAGpC,GAFA0E,EAAOA,EAAKP,cAERpF,KAAK0F,EAAO,KAAKC,GACjB,MAAM,IAAIlH,UAAUkH,EAAO,IAAMD,EAAO,wBAK5C,OAFA1F,KAAK0F,EAAO,KAAKC,GAAQ1E,EAElBA,GAIXhC,EAAQ2G,SAAW,SAASC,EAAKC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAf,EACAgB,EAeJ,GAZmB,kBAARR,IACPA,GAAO,GAEHS,QAAQC,MACRD,QAAQC,KAAK,6DAA8DV,KAKnFA,EAAMA,EAAIW,QAGA7F,MAAM,SACZ,OAAO,EAIX,GAAY,KAARkF,EACA,OAAO,EAIX,IAEIR,EAAapG,EAAQoG,WAAWS,GAClC,MAAOxH,GACL+G,EAAapG,EAAQoG,WAAWpG,EAAQyC,UAe5C,OAXAuE,EAAcZ,EAAWlC,SAASC,OAClC+C,EAAWd,EAAW5C,cACtBsD,EAAcV,EAAWxC,WAAWV,QAEhC6D,EADoC,MAApCX,EAAWxC,WAAWrB,UACP,MAEA6D,EAAWxC,WAAWrB,WAK5B,QADb6E,EAAOR,EAAIlF,MAAM,cAEbkF,EAAMA,EAAIY,OAAO,GACbJ,EAAK,KAAOJ,MAOP,QADbI,EAAOR,EAAIlF,MAAM,cAEbkF,EAAMA,EAAI/C,MAAM,GAAI,GAChBuD,EAAK,KAAOF,EAASjE,UAAYmE,EAAK,KAAOF,EAASlE,SAAWoE,EAAK,KAAOF,EAASnE,SAAWqE,EAAK,KAAOF,EAASpE,aAK9HqE,EAAiB,IAAI5D,OAAOwD,EAAe,QAEtCH,EAAIlF,MAAM,gBACXuF,EAAYL,EAAIlD,MAAMoD,IACRhI,OAAS,KAGfmI,EAAUnI,OAAS,IACPmI,EAAU,GAAGvF,MAAM,eAAiBuF,EAAU,GAAGvF,MAAMyF,GAEvC,IAAxBF,EAAU,GAAGnI,SACDmI,EAAU,GAAGvF,MAAM,WAAauF,EAAU,GAAGvF,MAAMyF,MAAsBF,EAAU,GAAGvF,MAAM,WAE5FuF,EAAU,GAAGvF,MAAM,eAAiBuF,EAAU,GAAGvF,MAAMyF,MAAsBF,EAAU,GAAGvF,MAAM,YAchI1B,EAAQyH,GAAK7G,EAAQ0E,UAAY,CAC7BoC,MAAO,WACH,OAAO1H,EAAQe,OAEnBiB,OAAQ,SAAS2F,EAAa1F,GAC1B,IAEIf,EACAsB,EACAoF,EAJAxI,EAAQ2B,KAAKE,OACbe,EAAS2F,GAAehH,EAAQF,cASpC,GAHAwB,EAAmBA,GAAoBmB,KAAKyE,MAG9B,IAAVzI,GAAsC,OAAvBuB,EAAQJ,WACvBiC,EAAS7B,EAAQJ,gBACd,GAAc,OAAVnB,GAAyC,OAAvBuB,EAAQH,WACjCgC,EAAS7B,EAAQH,eACd,CACH,IAAKU,KAAQf,EACT,GAAI6B,EAAON,MAAMvB,EAAQe,GAAMM,QAAQQ,QAAS,CAC5C4F,EAAiBzH,EAAQe,GAAMc,OAE/B,MAMRQ,GAFAoF,EAAiBA,GAAkB5H,EAAQC,EAAE8B,gBAErB3C,EAAO4C,EAAQC,GAG3C,OAAOO,GAEXpD,MAAO,WACH,OAAO2B,KAAKE,QAEhBJ,MAAO,WACH,OAAOE,KAAKC,QAEhB8G,IAAK,SAAS1I,GAGV,OAFA2B,KAAKE,OAASW,OAAOxC,GAEd2B,MAEXgH,IAAK,SAAS3I,GACV,IAAI4I,EAAa/H,EAAEoF,iBAAiBE,KAAK,KAAMxE,KAAKE,OAAQ7B,GAE5D,SAAS6I,EAAMzC,EAAO0C,EAAMC,EAAOC,GAC/B,OAAO5C,EAAQpC,KAAKyE,MAAMG,EAAaE,GAK3C,OAFAnH,KAAKE,OAAShB,EAAEyE,OAAO,CAAC3D,KAAKE,OAAQ7B,GAAQ6I,EAAO,GAAKD,EAElDjH,MAEXsH,SAAU,SAASjJ,GACf,IAAI4I,EAAa/H,EAAEoF,iBAAiBE,KAAK,KAAMxE,KAAKE,OAAQ7B,GAE5D,SAAS6I,EAAMzC,EAAO0C,EAAMC,EAAOC,GAC/B,OAAO5C,EAAQpC,KAAKyE,MAAMG,EAAaE,GAK3C,OAFAnH,KAAKE,OAAShB,EAAEyE,OAAO,CAACtF,GAAQ6I,EAAO7E,KAAKyE,MAAM9G,KAAKE,OAAS+G,IAAeA,EAExEjH,MAEXuH,SAAU,SAASlJ,GACf,SAAS6I,EAAMzC,EAAO0C,EAAMC,EAAOC,GAC/B,IAAIJ,EAAa/H,EAAEoF,iBAAiBG,EAAO0C,GAC3C,OAAO9E,KAAKyE,MAAMrC,EAAQwC,GAAc5E,KAAKyE,MAAMK,EAAOF,GAAc5E,KAAKyE,MAAMG,EAAaA,GAKpG,OAFAjH,KAAKE,OAAShB,EAAEyE,OAAO,CAAC3D,KAAKE,OAAQ7B,GAAQ6I,EAAO,GAE7ClH,MAEXwH,OAAQ,SAASnJ,GACb,SAAS6I,EAAMzC,EAAO0C,EAAMC,EAAOC,GAC/B,IAAIJ,EAAa/H,EAAEoF,iBAAiBG,EAAO0C,GAC3C,OAAO9E,KAAKyE,MAAMrC,EAAQwC,GAAc5E,KAAKyE,MAAMK,EAAOF,GAK9D,OAFAjH,KAAKE,OAAShB,EAAEyE,OAAO,CAAC3D,KAAKE,OAAQ7B,GAAQ6I,GAEtClH,MAEXyH,WAAY,SAASpJ,GACjB,OAAOgE,KAAKjB,IAAInC,EAAQe,KAAKE,QAAQoH,SAASjJ,GAAOA,WAQ7DY,EAAQwG,SAAS,SAAU,KAAM,CAC7B5C,WAAY,CACRrB,UAAW,IACXW,QAAS,KAEbM,cAAe,CACXP,SAAU,IACVD,QAAS,IACTD,QAAS,IACTD,SAAU,KAEd2F,QAAS,SAAS3H,GACd,IAAI4H,EAAI5H,EAAS,GACjB,OAAkC,OAAvBA,EAAS,IAAM,IAAa,KAC5B,IAAN4H,EAAW,KACL,IAANA,EAAW,KACL,IAANA,EAAW,KAAO,MAE3BxE,SAAU,CACNC,OAAQ,OAOZnE,EAAQwG,SAAS,SAAU,MAAO,CAC9BhF,QAAS,CACLQ,OAAQ,QACRP,SAAU,SAEdO,OAAQ,SAAS5C,EAAO4C,EAAQC,GAC5B,IACIO,EADAmG,EAAQ3I,EAAQC,EAAEoD,SAASrB,EAAQ,QAAU,IAAM,GAoBvD,OAjBA5C,GAAgB,IAGhB4C,EAASA,EAAOT,QAAQ,SAAU,IAElCiB,EAASxC,EAAQC,EAAE8B,eAAe3C,EAAO4C,EAAQC,GAE7CjC,EAAQC,EAAEoD,SAASb,EAAQ,OAC3BA,EAASA,EAAOkB,MAAM,KAEfkF,QAAQ,EAAG,EAAGD,EAAQ,OAE7BnG,EAASA,EAAOqG,KAAK,KAErBrG,EAASA,EAASmG,EAAQ,MAGvBnG,GAEXf,SAAU,SAASsC,GACf,QAA4C,KAAnC/D,EAAQC,EAAE0B,eAAeoC,IAAkBJ,QAAQ,OAM5E,WACQ,IAAIT,EAAU,CACV4F,KAAM,IACNC,SAAU,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAE9DC,EAAS,CACLF,KAAM,KACNC,SAAU,CAAC,IAAK,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAMjEE,EAHW/F,EAAQ6F,SAASG,OAAOF,EAAOD,SAASI,QAAO,SAAUC,GACpE,OAAOlG,EAAQ6F,SAASzF,QAAQ8F,GAAQ,MAEZP,KAAK,KAErCI,EAAgB,IAAMA,EAAc1H,QAAQ,IAAK,WAAa,IAElEvB,EAAQwG,SAAS,SAAU,QAAS,CAChChF,QAAS,CACLQ,OAAQ,aACRP,SAAU,IAAI8B,OAAO0F,IAEzBjH,OAAQ,SAAS5C,EAAO4C,EAAQC,GAC5B,IAGI6D,EACAzB,EACA4B,EAJAoD,EAAQrJ,EAAQC,EAAEoD,SAASrB,EAAQ,MAAQgH,EAAS9F,EACpDoG,EAAStJ,EAAQC,EAAEoD,SAASrB,EAAQ,OAAShC,EAAQC,EAAEoD,SAASrB,EAAQ,OAAS,IAAM,GAQ3F,IAFAA,EAASA,EAAOT,QAAQ,SAAU,IAE7BuE,EAAQ,EAAGA,GAASuD,EAAMN,SAASjK,OAAQgH,IAI5C,GAHAzB,EAAMjB,KAAKgB,IAAIiF,EAAMP,KAAMhD,GAC3BG,EAAM7C,KAAKgB,IAAIiF,EAAMP,KAAMhD,EAAQ,GAErB,OAAV1G,GAA4B,IAAVA,GAAeA,GAASiF,GAAOjF,EAAQ6G,EAAK,CAC9DqD,GAAUD,EAAMN,SAASjD,GAErBzB,EAAM,IACNjF,GAAgBiF,GAGpB,MAMR,OAFSrE,EAAQC,EAAE8B,eAAe3C,EAAO4C,EAAQC,GAEjCqH,GAEpB7H,SAAU,SAASsC,GACf,IACI+B,EACAyD,EAFAnK,EAAQY,EAAQC,EAAE0B,eAAeoC,GAIrC,GAAI3E,EAAO,CACP,IAAK0G,EAAQ5C,EAAQ6F,SAASjK,OAAS,EAAGgH,GAAS,EAAGA,IAAS,CAC3D,GAAI9F,EAAQC,EAAEoD,SAASU,EAAQb,EAAQ6F,SAASjD,IAAS,CACrDyD,EAAkBnG,KAAKgB,IAAIlB,EAAQ4F,KAAMhD,GAEzC,MAGJ,GAAI9F,EAAQC,EAAEoD,SAASU,EAAQiF,EAAOD,SAASjD,IAAS,CACpDyD,EAAkBnG,KAAKgB,IAAI4E,EAAOF,KAAMhD,GAExC,OAIR1G,GAAUmK,GAAmB,EAGjC,OAAOnK,KA3EnB,GAkFQY,EAAQwG,SAAS,SAAU,WAAY,CACvChF,QAAS,CACLQ,OAAQ,QAEZA,OAAQ,SAAS5C,EAAO4C,EAAQC,GAC5B,IAKIO,EAEAzD,EAPA0D,EAASzC,EAAQI,QAAQJ,EAAQW,QAAQL,eACzCkJ,EAAU,CACNC,OAAQzH,EAAON,MAAM,wBAAwB,GAC7CgI,MAAO1H,EAAON,MAAM,wBAAwB,IAqBpD,IAdAM,EAASA,EAAOT,QAAQ,WAAY,IAGpCiB,EAASxC,EAAQC,EAAE8B,eAAe3C,EAAO4C,EAAQC,GAG7C7C,GAAS,GACToK,EAAQC,OAASD,EAAQC,OAAOlI,QAAQ,SAAU,IAClDiI,EAAQE,MAAQF,EAAQE,MAAMnI,QAAQ,SAAU,KACzCnC,EAAQ,IAAOY,EAAQC,EAAEoD,SAASmG,EAAQC,OAAQ,OAASzJ,EAAQC,EAAEoD,SAASmG,EAAQC,OAAQ,OACrGD,EAAQC,OAAS,IAAMD,EAAQC,QAI9B1K,EAAI,EAAGA,EAAIyK,EAAQC,OAAO3K,OAAQC,IAGnC,OAFSyK,EAAQC,OAAO1K,IAGpB,IAAK,IACDyD,EAASxC,EAAQC,EAAEsE,OAAO/B,EAAQC,EAAOyB,SAASC,OAAQpF,GAC1D,MACJ,IAAK,IACDyD,EAASxC,EAAQC,EAAEsE,OAAO/B,EAAQ,IAAKzD,EAAI0D,EAAOyB,SAASC,OAAOrF,OAAS,GAMvF,IAAKC,EAAIyK,EAAQE,MAAM5K,OAAS,EAAGC,GAAK,EAAGA,IAGvC,OAFSyK,EAAQE,MAAM3K,IAGnB,IAAK,IACDyD,EAASzD,IAAMyK,EAAQE,MAAM5K,OAAS,EAAI0D,EAASC,EAAOyB,SAASC,OAASnE,EAAQC,EAAEsE,OAAO/B,EAAQC,EAAOyB,SAASC,SAAUqF,EAAQE,MAAM5K,QAAU,EAAIC,KAC3J,MACJ,IAAK,IACDyD,EAASzD,IAAMyK,EAAQE,MAAM5K,OAAS,EAAI0D,EAAS,IAAMxC,EAAQC,EAAEsE,OAAO/B,EAAQ,MAAOgH,EAAQE,MAAM5K,QAAU,EAAIC,GAAK0D,EAAOyB,SAASC,OAAOrF,OAAS,IAMtK,OAAO0D,KAOXxC,EAAQwG,SAAS,SAAU,cAAe,CAC1ChF,QAAS,CACLQ,OAAQ,WACRP,SAAU,YAEdO,OAAQ,SAAS5C,EAAO4C,EAAQC,GAC5B,IAEImD,GAD+B,kBAAVhG,GAAuBY,EAAQC,EAAEqB,MAAMlC,GAAiC,OAAxBA,EAAMuK,iBACvDjG,MAAM,KAM9B,OAJA1B,EAASA,EAAOT,QAAQ,eAAgB,IAE/BvB,EAAQC,EAAE8B,eAAeH,OAAOwD,EAAM,IAAKpD,EAAQC,GAE5C,IAAMmD,EAAM,IAEhC3D,SAAU,SAASsC,GACf,IAAIqB,EAAQpF,EAAQC,EAAEoD,SAASU,EAAQ,MAAQA,EAAOL,MAAM,MAAQK,EAAOL,MAAM,MAC7EtE,EAAQwC,OAAOwD,EAAM,IACrBU,EAAQlE,OAAOwD,EAAM,IAIzB,SAAS6C,EAAMzC,EAAO0C,EAAMC,EAAOC,GAC/B,IAAIJ,EAAahI,EAAQC,EAAEoF,iBAAiBG,EAAO0C,GAEnD,OADW1C,EAAQwC,GAAeE,EAAOF,IAAeA,EAAaA,GAIzE,OARAlC,EAAQ9F,EAAQC,EAAEoD,SAASU,EAAQ,MAAQ+B,IAAU,EAAIA,EAQlD9F,EAAQC,EAAEyE,OAAO,CAACtF,EAAOgE,KAAKgB,IAAI,GAAI0B,IAASmC,EAAO,MAOjEjI,EAAQwG,SAAS,SAAU,UAAW,CACtChF,QAAS,CACLQ,OAAQ,OAEZA,OAAQ,SAAS5C,EAAO4C,EAAQC,GAC5B,IAAIQ,EAASzC,EAAQI,QAAQJ,EAAQW,QAAQL,eAEzCmI,EAAUzI,EAAQC,EAAEoD,SAASrB,EAAQ,MAAQ,IAAM,GASvD,OANAA,EAASA,EAAOT,QAAQ,OAAQ,IAEhCkH,GAAWhG,EAAOgG,QAAQrJ,GAEjBY,EAAQC,EAAE8B,eAAe3C,EAAO4C,EAAQC,GAEjCwG,KAOpBzI,EAAQwG,SAAS,SAAU,aAAc,CACzChF,QAAS,CACLQ,OAAQ,MACRP,SAAU,OAEdO,OAAQ,SAAS5C,EAAO4C,EAAQC,GAC5B,IACIO,EADAmG,EAAQ3I,EAAQC,EAAEoD,SAASrB,EAAQ,MAAQ,IAAM,GAsBrD,OAnBIhC,EAAQW,QAAQD,oBAChBtB,GAAgB,KAIpB4C,EAASA,EAAOT,QAAQ,QAAS,IAEjCiB,EAASxC,EAAQC,EAAE8B,eAAe3C,EAAO4C,EAAQC,GAE7CjC,EAAQC,EAAEoD,SAASb,EAAQ,OAC3BA,EAASA,EAAOkB,MAAM,KAEfkF,QAAQ,EAAG,EAAGD,EAAQ,KAE7BnG,EAASA,EAAOqG,KAAK,KAErBrG,EAASA,EAASmG,EAAQ,IAGvBnG,GAEXf,SAAU,SAASsC,GACf,IAAIjD,EAASd,EAAQC,EAAE0B,eAAeoC,GACtC,OAAI/D,EAAQW,QAAQD,kBACA,IAATI,EAEJA,KAOXd,EAAQwG,SAAS,SAAU,OAAQ,CACnChF,QAAS,CACLQ,OAAQ,MACRP,SAAU,OAEdO,OAAQ,SAAS5C,EAAO4C,EAAQC,GAC5B,IAAI2H,EAAQxG,KAAKyG,MAAMzK,EAAQ,GAAK,IAChC0K,EAAU1G,KAAKyG,OAAOzK,EAAiB,GAARwK,EAAa,IAAO,IACnDG,EAAU3G,KAAKyE,MAAMzI,EAAiB,GAARwK,EAAa,GAAiB,GAAVE,GAEtD,OAAOF,EAAQ,KAAOE,EAAU,GAAK,IAAMA,EAAUA,GAAW,KAAOC,EAAU,GAAK,IAAMA,EAAUA,IAE1GtI,SAAU,SAASsC,GACf,IAAIiG,EAAYjG,EAAOL,MAAM,KACzBqG,EAAU,EAgBd,OAbyB,IAArBC,EAAUlL,QAEViL,GAA4C,GAAvBnI,OAAOoI,EAAU,IAAW,GAEjDD,GAA4C,GAAvBnI,OAAOoI,EAAU,IAEtCD,GAAoBnI,OAAOoI,EAAU,KACT,IAArBA,EAAUlL,SAEjBiL,GAA4C,GAAvBnI,OAAOoI,EAAU,IAEtCD,GAAoBnI,OAAOoI,EAAU,KAElCpI,OAAOmI,MAKnB/J,IAz+BO","file":"static/js/0.53d5b7c4.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n"],"sourceRoot":""}